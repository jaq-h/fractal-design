{"version":3,"sources":["components/Triangle.js","components/sketch.js","components/ControlBar.js","App.js","serviceWorker.js","index.js"],"names":["Tri","p","this","g","r","b","w","o","red","green","blue","opacity","i","width","fill","noStroke","h","Math","sqrt","triangle","sketch","triangles","twistSpeed","twistAmp","twistAngle","twistRate","spinAngle","spinRate","count","redRange","greenRange","blueRange","setup","console","log","createCanvas","windowWidth","windowHeight","frameRate","colorMode","RGB","listSize","temp","setSize","setColor","random","push","windowResized","resizeCanvas","myCustomRedrawAccordingToNewPropsHandler","props","state","playing","noLoop","loop","draw","clear","background","translate","rotate","length","drawTriangle","j","ControlBar","makeStyles","root","handleRangeUpdate","color","values","toggleEffectMenu","arr","htmlFor","style","id","type","min","max","step","defaultValue","onChange","event","setValue","target","value","setState","menu","toggleColorMenu","Slider","className","aria-labelledby","icons","Icon","onClick","title","name","size","pause","play","Component","App","updateValue","attr","updateColor","range","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fba16dd5.chunk.js","sourcesContent":["class Tri {\r\n  \r\n  \r\n    constructor(p)\r\n    {\r\n      this.g=0; //red\r\n      this.r=0; //green\r\n      this.b=0; //blue\r\n      this.w = 50; //width\r\n      this.o = 1; //opacity\r\n      this.p = p; //P5 Canvas\r\n      \r\n    }\r\n  \r\n    setColor(red,green,blue, opacity=25)\r\n    {\r\n \r\n        this.r= red;\r\n        this.g= green; \r\n        this.b= blue; \r\n        this.o= opacity;\r\n    \r\n    }\r\n    setSize(i)\r\n    {\r\n      this.w = 7*this.p.width/(i+1);\r\n      \r\n    }\r\n\r\n    drawTriangle()\r\n    {\r\n      this.p.fill([this.r,this.g,this.b,this.o]);\r\n      this.p.noStroke();\r\n      let h = Math.sqrt(3)/2*this.w;\r\n      this.p.triangle( (-1/2.0)*this.w,(-1/3.0)*h, (1/2.0)*this.w, (-1/3.0)*h, 0, (2/3.0)*h); \r\n    }\r\n   \r\n  }\r\n\r\nexport default Tri;\r\n\r\n\r\n   //var rand = random(0,1);\r\n      // if(rand<.5)\r\n      // {\r\n        // this.r= random(50,150);\r\n        // this.g= 0; \r\n        // this.b= random(150,255); \r\n        \r\n    //}\r\n    //else\r\n    //{\r\n        //this.r= random(100,150); \r\n        //this.g= 0;\r\n        //this.b= random(50,200); \r\n        //this.o =opacity;\r\n      \r\n    //}\r\n    //else{\r\n    //  this.r= 255; \r\n    //  this.g= random(200,255);\r\n    //  this.b= 255; \r\n    //  this.o =opacity;\r\n    //}","import Tri from './Triangle.js';\r\n\r\n\r\n function sketch (p) {\r\n  let triangles = [];\r\n  let listSize = 300.0;\r\n  let twistSpeed = 0;\r\n  let twistAmp = 0;\r\n  let twistAngle = 0;\r\n  let twistRate = 0;\r\n  let spinAngle =0;\r\n  let spinRate = 0;\r\n  let count =0;\r\n  let opacity = 25;\r\n  let redRange = [0,255];\r\n  let greenRange = [0,255];\r\n  let blueRange = [0,255];\r\n\r\n  p.setup = ()  => {\r\n    \r\n    console.log('setup');\r\n   p.createCanvas(p.windowWidth,p.windowHeight);\r\n   p.frameRate(60);\r\n   p.colorMode(p.RGB, 255)\r\n   for(var i = 0; i< listSize-1; i++)\r\n   {\r\n     let temp = new Tri(p);\r\n     temp.setSize(i);\r\n     temp.setColor(p.random(redRange[0],redRange[1]),p.random(greenRange[0],greenRange[1]),p.random(blueRange[0],blueRange[1]));\r\n     triangles.push(temp);\r\n     \r\n   }\r\n  //  p.noLoop();\r\n    // alert(\"Warning this animation contains flashing colors which may not be suitable for photosensitive epilepsy.\");\r\n  };\r\n\r\n  p.windowResized = () =>  {\r\n    p.resizeCanvas(p.windowWidth, p.windowHeight);\r\n  }\r\n\r\n  p.myCustomRedrawAccordingToNewPropsHandler = (props) => {\r\n    console.log(props.state);\r\n\r\n      twistSpeed = props.state.twistSpeed/10.0;\r\n \r\n      twistAmp = props.state.twistAmp;\r\n    \r\n  \r\n      twistRate = props.state.twistRate;\r\n    \r\n    spinRate = props.state.spinRate;\r\n  \r\n    redRange = props.state.redRange;\r\n    greenRange = props.state.greenRange;\r\n\r\n   opacity = props.state.opacity;\r\n\r\n    if(props.state.playing === false){\r\n      console.log('paused');\r\n      p.noLoop();\r\n      p.resizeCanvas(p.windowWidth, p.windowHeight);\r\n\r\n      // p.textSize(32);\r\n      //p.text('Click to resume!');\r\n    }\r\n    else if (props.state.playing === true){\r\n      p.loop();\r\n      console.log('playing');\r\n    \r\n    }\r\n    \r\n\r\n   };\r\n\r\n   p.draw = () => {\r\n      p.clear();\r\n      p.background(255);\r\n      p.translate(p.windowWidth/2,p.windowHeight/2);\r\n      \r\n      count+=twistSpeed;\r\n      twistAngle = count + twistAmp;\r\n      spinAngle += spinRate;\r\n      p.rotate(spinAngle);\r\n      //draw resize and rotate\r\n      for(var i =0.0; i<triangles.length-2; i++)\r\n      { \r\n        triangles[i].drawTriangle();\r\n        triangles[i].setSize(i);\r\n        p.rotate(  (twistRate)*i/(1500) +  (twistAngle)/(1500) );\r\n    \r\n      }\r\n    \r\n      for(var j=0; j<triangles.length-2; j++) //shift array \r\n      {\r\n          triangles[j] = triangles[j+1];   \r\n      }\r\n\r\n      triangles[triangles.length-2] = new Tri(p);\r\n      triangles[triangles.length-2].setSize(triangles.length);\r\n      triangles[triangles.length-2].setColor(p.random(redRange[0],redRange[1]),p.random(greenRange[0],greenRange[1]),p.random(blueRange[0],blueRange[1]),opacity);\r\n\r\n      //p.rotate(count*-1.5);\r\n      // p.background(100);\r\n      // p.normalMaterial();\r\n      // p.noStroke();\r\n      // p.push();\r\n      // p.rotateY(rotation);\r\n      // p.box(100);\r\n      // p.pop();\r\n  };\r\n\r\n\r\n}\r\n\r\nexport default sketch;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// function setup()\r\n// {\r\n   \r\n//    createCanvas(1920,1080);\r\n//    frameRate(10);\r\n//    colorMode(RGB, 255)\r\n//    //img = loadImage(\"texture1.png\");\r\n//    for(var i = 0; i< listSize-1; i++)\r\n//    {\r\n//      let temp = new Tri();\r\n//      temp.setSize(i);\r\n//      temp.randomColor();\r\n//      triangles.push(temp);\r\n     \r\n//    }\r\n//      // let voidTri = new Tri();\r\n//      // voidTri.setSize(listSize);\r\n//      // // triangles[triangles.length-1].rotate(675/360*(triangles.length-2));\r\n//      // voidTri.r=0;\r\n//      // voidTri.g=0;\r\n//      // voidTri.b=0;\r\n//      // voidTri.o=200;\r\n//     //triangles.push(voidTri);\r\n   \r\n   \r\n   \r\n// }\r\n\r\n// function draw()\r\n// {\r\n//   clear();\r\n//   background(200,0,255);\r\n//           translate(width/2,height/2);\r\n//           count+=2;\r\n\r\n//      for(var i =0; i<triangles.length-2; i++)\r\n//      { \r\n//       triangles[i].drawT();\r\n//       triangles[i].setSize(i);\r\n//       //triangles[i].o = (255)/(i+1);\r\n \r\n//       rotate((i/1500)+count/1000 );\r\n   \r\n//      }\r\n//    //  triangles[triangles.length-1].drawT();\r\n   \r\n//      for(var j=0; j<triangles.length-2; j++)\r\n//      {\r\n//         triangles[j] = triangles[j+1];\r\n           \r\n//      }\r\n//      triangles[triangles.length-2] = new Tri();\r\n//       triangles[triangles.length-2].setSize(triangles.length);\r\n//       triangles[triangles.length-2].randomColor();\r\n//      // // triangles[triangles.length-2].rotate(675/360*(triangles.length-2));\r\n//      // triangles[triangles.length-1].setSize(triangles.length-1);\r\n//      // // triangles[triangles.length-1].rotate((675/360*(triangles.length-2))+count);\r\n//      //filter(BLUR,1);\r\n     \r\n    \r\n//   // delay(10);\r\n// }\r\n","import React, { Component } from 'react';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport {  Icon } from 'semantic-ui-react'\r\n// import Framework7 from 'framework7';\r\n// import { Range } from 'framework7-react'\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\nclass ControlBar extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    console.log(props);\r\n    this.state = {\r\n      menu:[],\r\n\r\n\r\n    };\r\n    \r\n  }\r\n\r\n \r\n\r\n   makeStyles = {\r\n    root: {\r\n      width: 300,\r\n    },\r\n  };\r\n\r\n  handleRangeUpdate = (color, values) => {\r\n      console.log(color,values);\r\n      console.log('handleupdate');\r\n      //console.log(this.props);\r\n      this.props.setColor(color,values);\r\n  }\r\n\r\n  toggleEffectMenu = () =>{\r\n    let arr = [];\r\n    arr.push(\r\n       <>\r\n         <li>\r\n        <label htmlFor=\"slider\">\r\n         Twist Rate\r\n         <input\r\n              style={{width:'80%'}}\r\n             id=\"twistRate\"\r\n             type=\"range\"\r\n             min={-1}\r\n             max={1}\r\n             step={.01}\r\n            defaultValue={0}\r\n             onChange={(event) => this.props.setValue('twistRate',+event.target.value)}\r\n         />\r\n        </label>\r\n        </li>\r\n         <li>\r\n         <label htmlFor=\"slider\">\r\n           Twist Offset\r\n           </label>\r\n           <input\r\n            style={{width:'80%'}}\r\n               id=\"twistAmp\"\r\n               type=\"range\"\r\n               min={-1000}\r\n               max={1000}\r\n               step={1}\r\n               defaultValue={0}\r\n               onChange={(event) => this.props.setValue('twistAmp',+event.target.value)}\r\n           />\r\n          \r\n         </li>\r\n         <li>\r\n          <label htmlFor=\"slider\">\r\n          Spin Rate\r\n          <input\r\n           style={{width:'80%'}}\r\n              id=\"spinRate\"\r\n              type=\"range\"\r\n              min={-0.1}\r\n              max={.1}\r\n              step={.001}\r\n              defaultValue={0}\r\n              onChange={(event) => this.props.setValue('spinRate',+event.target.value)}\r\n          />\r\n         </label>\r\n         </li>\r\n\r\n         </>\r\n       \r\n       );\r\n    this.setState({ menu:arr});\r\n    \r\n  }\r\n\r\n  toggleColorMenu = () =>{\r\n    let arr = [];\r\n    arr.push(\r\n       <>\r\n          <Slider\r\n               style={{width:'80%'}}\r\n                className='colorSlider'\r\n                id='redRange'\r\n                min={0}\r\n                max={255}\r\n                defaultValue={[0,255]}\r\n                step={1}\r\n                // valueLabelDisplay=\"auto\"\r\n                aria-labelledby=\"ranges-slider\"\r\n                onChange={(event, value) => this.handleRangeUpdate('red', value)}\r\n          ></Slider>\r\n          <Slider\r\n               style={{width:'80%'}}\r\n                className='colorSlider'\r\n                id='greenRange'\r\n                min={0}\r\n                max={255}\r\n                defaultValue={[0,255]}\r\n                step={1}\r\n                // valueLabelDisplay=\"auto\"\r\n                aria-labelledby=\"ranges-slider\"\r\n                onChange={(event, value) => this.handleRangeUpdate('green', value)}\r\n          ></Slider>\r\n          <Slider\r\n               style={{width:'80%'}}\r\n                className='colorSlider'\r\n                id='blueRange'\r\n                min={0}\r\n                max={255}\r\n                defaultValue={[0,255]}\r\n                step={1}\r\n                // valueLabelDisplay=\"auto\"\r\n                aria-labelledby=\"range-slider\"\r\n                onChange={(event, value) => this.handleRangeUpdate('blue', value)}\r\n          ></Slider>\r\n          <Slider\r\n               style={{width:'80%'}}\r\n                className='colorSlider'\r\n                id='opacity'\r\n                min={0}\r\n                max={255}\r\n                defaultValue={50}\r\n                step={1}\r\n                // valueLabelDisplay=\"auto\"\r\n                aria-labelledby=\"continuous-slider\"\r\n                onChange={(event, value) => this.props.setValue('opacity', value)}\r\n          ></Slider>\r\n         </>\r\n       \r\n       );\r\n    this.setState({ menu:arr});\r\n    \r\n  }\r\n\r\n  \r\n\r\n\r\n\r\n  render(){\r\n      const icons = [];\r\n      \r\n      icons.push( <Icon onClick={this.toggleColorMenu} title='Color' name='tint' size='big' color='blue'/>);\r\n\r\n      if(this.props.state.playing){\r\n       icons.push( <Icon onClick={this.props.pause} title='Pause' color='purple' size='big' name='pause'/>);\r\n       \r\n      }\r\n      else{\r\n       icons.push( <Icon onClick={this.props.play} title='Play' color='purple' size='big' name='play'/>);\r\n      }\r\n\r\n      icons.push( <Icon onClick={this.toggleEffectMenu} title='Effects' name='magic icon' size='big' color='blue'/>);\r\n      \r\n     \r\n    \r\n    \r\n    return(\r\n      <div  className=\"Control-Bar\">\r\n        <div className=\"icons\">\r\n          {icons}\r\n        </div>\r\n        <div className=\"menu\">\r\n            {this.state.menu.length === 0 ?  null : this.state.menu }\r\n        </div>\r\n        \r\n       \r\n        \r\n        \r\n          \r\n        \r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ControlBar;\r\n// onChange={this.props.updateSpeed()}\r\n\r\n// onChange={handleChange}\r\n\r\n{/* f7 <Range\r\n              min={0}\r\n              max={255}\r\n              step={1}\r\n              label={true}\r\n              dual={true}\r\n              color=\"green\"\r\n              // onRangeChange={this.onPriceChange.bind(this)}\r\n         ></Range> */}\r\n\r\n/* <Slider\r\n\r\n <div>\r\n            <label htmlFor=\"slider\">\r\n                Twist Speed\r\n                <input\r\n                    id=\"twistSpeed\"\r\n                    type=\"range\"\r\n                    min={-10}\r\n                    max={10}\r\n                    step={.001}\r\n                    defaultvalue={0}\r\n                    value={this.props.state.twistSpeed}\r\n                    onChange={event => this.props.setValue(event)}\r\n                />\r\n               \r\n            </label>\r\n            <span> <p> {this.props.state.twistSpeed}</p></span>\r\n            \r\n\r\n        </div>\r\n            style={this.makeStyles}\r\n                className='slider'\r\n                id='twistSpeed'\r\n                min={-10}\r\n                max={10}\r\n                defaultValue={[0]}\r\n                step={1}\r\n                valueLabelDisplay=\"auto\"\r\n                aria-labelledby=\"slider\"\r\n                onChange={this.handleUpdate}\r\n            ></Slider>\r\n            <Slider\r\n                        style={this.makeStyles}\r\n\r\n                className='slider'\r\n                id='twistAmp'\r\n                min={0}\r\n                max={10}\r\n                defaultValue={[0]}\r\n                step={1}\r\n                valueLabelDisplay=\"auto\"\r\n                aria-labelledby=\"continuous-slider\"\r\n                onChange={this.handleUpdate}\r\n            ></Slider> */\r\n\r\n        //     <div>\r\n        //     <label htmlFor=\"slider\">\r\n        //         Twist angle\r\n        //         <input\r\n        //             id=\"twistAngle\"\r\n        //             type=\"range\"\r\n        //             min={-1000}\r\n        //             max={1000}\r\n        //             step={1}\r\n        //             defaultvalue={0}\r\n        //             value={+this.props.state.twistAngle}\r\n                    \r\n        //         />\r\n               \r\n        //     </label>\r\n        //     <span> <p> {this.props.state.twistAngle}</p></span>\r\n            \r\n\r\n        // </div>\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport P5Wrapper from 'react-p5-wrapper';\r\nimport sketch from './components/sketch.js';\r\nimport ControlBar from './components/ControlBar';\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    //console.log(props);\r\n    // if(this.props.currentUser.access_token === undefined ){\r\n    //   this.props.history.go('http://localhost:3001/api/auth');\r\n\r\n\r\n    this.state = {\r\n    \r\n     twistSpeed: 0,\r\n     twistAmp: 0,\r\n     twistAngle:0,\r\n     twistRate:0,\r\n     spinRate:0,\r\n     spinAngle:0,\r\n     redRange:[0,255],\r\n     greenRange:[0,255],\r\n     blueRange:[0,255],\r\n     opacity:50,\r\n     playing: false,\r\n    }\r\n\r\n    // this.togglePlay = this.togglePlay.bind(this);\r\n\r\n\r\n\r\n  }\r\n   updateValue = (attr,value) => {\r\n      console.log(attr,value);\r\n\r\n      this.setState({ [attr]:value });\r\n  }\r\n\r\n  updateColor = (color, range) => {\r\n    console.log(color,range)\r\n    this.setState({ [color+'Range']:range});\r\n  }\r\n\r\n  play = () => {\r\n    this.setState({playing: true});\r\n    console.log('play function');\r\n  }\r\n  pause = () => {\r\n    console.log('pause function');\r\n    this.setState({playing: false});\r\n\r\n\r\n\r\n  }\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <ControlBar state={this.state}  setValue={this.updateValue} setColor={this.updateColor}play={this.play}  pause={this.pause} />\r\n        <P5Wrapper sketch={sketch} state={this.state} className=\"sketch\"  />\r\n\r\n      </div>\r\n    );\r\n  } \r\n}\r\nexport default App;\r\n// updateSpeed={this.updateSpeed}\r\n      // value={10}\r\n      // // onChange={handleChange}\r\n\r\n// import React from 'react';\r\n// import { makeStyles } from '@material-ui/core/styles';\r\n// import Typography from '@material-ui/core/Typography';\r\n// import Slider from '@material-ui/core/Slider';\r\n\r\n// const useStyles = makeStyles({\r\n//   root: {\r\n//     width: 300,\r\n//   },\r\n// });\r\n\r\n// function valuetext(value) {\r\n//   return `${value}°C`;\r\n// }\r\n\r\n// export default function RangeSlider() {\r\n//   const classes = useStyles();\r\n//   const [value, setValue] = React.useState([20, 37]);\r\n\r\n//   const handleChange = (event, newValue) => {\r\n//     setValue(newValue);\r\n//   };\r\n\r\n//   return (\r\n//     <div className={classes.root}>\r\n//       <Typography id=\"range-slider\" gutterBottom>\r\n//         Temperature range\r\n//       </Typography>\r\n//       <Slider\r\n//         value={value}\r\n//         onChange={handleChange}\r\n//         valueLabelDisplay=\"auto\"\r\n//         aria-labelledby=\"range-slider\"\r\n//         getAriaValueText={valuetext}\r\n//       />\r\n//     </div>\r\n//   );\r\n// }\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}