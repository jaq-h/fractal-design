{"version":3,"sources":["components/Triangle.js","components/sketch.js","components/ControlBar.js","App.js","serviceWorker.js","index.js"],"names":["Tri","p","this","g","r","b","w","o","red","green","blue","i","width","fill","noStroke","h","Math","sqrt","triangle","sketch","triangles","twistSpeed","count","colorRange","setup","console","log","createCanvas","windowWidth","windowHeight","frameRate","colorMode","RGB","listSize","temp","setSize","setColor","random","push","noLoop","myCustomRedrawAccordingToNewPropsHandler","props","values","playing","loop","draw","clear","background","translate","length","drawTriangle","rotate","j","ControlBar","marks","value","label","makeStyles","root","updateSpeed","className","style","margin","Slider","min","max","defaultValue","step","valueLabelDisplay","aria-labelledby","Icon","name","Component","App","setState","state","attributes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.72c0d165.chunk.js","sourcesContent":["class Tri {\n  \n  \n    constructor(p)\n    {\n      this.g=0; //red\n      this.r=0; //green\n      this.b=0; //blue\n      this.w = 50; //width\n      this.o = 1; //opacity\n      this.p = p; //P5 Canvas\n      \n    }\n  \n    setColor(red,green,blue)\n    {\n \n        this.r= red;\n        this.g= green; \n        this.b= blue; \n    \n    }\n    setSize(i)\n    {\n      this.w = 7*this.p.width/(i+1);\n      \n    }\n\n    drawTriangle()\n    {\n      this.p.fill([this.r,this.g,this.b, 100]);\n      this.p.noStroke();\n      let h = Math.sqrt(3)/2*this.w;\n      this.p.triangle( (-1/2.0)*this.w,(-1/3.0)*h, (1/2.0)*this.w, (-1/3.0)*h, 0, (2/3.0)*h); \n    }\n   \n  }\n\nexport default Tri;\n\n\n   //var rand = random(0,1);\n      // if(rand<.5)\n      // {\n        // this.r= random(50,150);\n        // this.g= 0; \n        // this.b= random(150,255); \n        \n    //}\n    //else\n    //{\n        //this.r= random(100,150); \n        //this.g= 0;\n        //this.b= random(50,200); \n        //this.o =opacity;\n      \n    //}\n    //else{\n    //  this.r= 255; \n    //  this.g= random(200,255);\n    //  this.b= 255; \n    //  this.o =opacity;\n    //}","import Tri from './Triangle.js';\n\n\n function sketch (p) {\n  let playing = false;\n  let triangles = [];\n  let listSize = 500;\n  let twistSpeed = 0;\n  let count =0;\n  let opacity = 25;\n  let rate = 1.0001;\n  let colorRange = {\n    minR:0,\n    maxR:255,\n    minG:0,\n    maxG:255,\n    minB:0,\n    maxB:255,\n  };\n\n  p.setup = ()  => {\n    \n    console.log('setup');\n   p.createCanvas(p.windowWidth*.9,p.windowHeight*.9);\n   p.frameRate(60);\n   p.colorMode(p.RGB, 255)\n   for(var i = 0; i< listSize-1; i++)\n   {\n     let temp = new Tri(p);\n     temp.setSize(i);\n     temp.setColor(p.random(colorRange['minR'],colorRange['maxR']),p.random(colorRange['minG'],colorRange['maxG']),p.random(colorRange['minB'],colorRange['maxB']));\n     triangles.push(temp);\n     \n   }\n   p.noLoop();\n  //  alert(\"Warning this animation contains flashing colors which may not be suitable for photosensitive epilepsy. Click the animation to play/pause\");\n  };\n\n  p.myCustomRedrawAccordingToNewPropsHandler = (props) => {\n    if (props.values){\n      twistSpeed = props.values.twistSpeed;\n      console.log(props.values);\n    }\n    if(props.playing){\n      \n      p.noLoop();\n      playing = false;\n      // p.textSize(32);\n      //p.text('Click to resume!');\n    }\n    else{\n      p.loop();\n      playing = true;\n    }\n   };\n\n  p.draw = () => {\n    \n    p.clear();\n    p.background(255);\n    p.translate(1920/2,1080/2);\n    count-=twistSpeed;\n\n    for(var i =0; i<triangles.length-2; i++) //draw resize and rotate\n    { \n      triangles[i].drawTriangle();\n      triangles[i].setSize(i);\n      p.rotate((i/1500)+(count/1500));\n  \n    }\n   \n     for(var j=0; j<triangles.length-2; j++) //shift array \n     {\n        triangles[j] = triangles[j+1];   \n     }\n\n     triangles[triangles.length-2] = new Tri(p);\n     triangles[triangles.length-2].setSize(triangles.length);\n     triangles[triangles.length-2].setColor(p.random(colorRange['minR'],colorRange['maxR']),p.random(colorRange['minG'],colorRange['maxG']),p.random(colorRange['minB'],colorRange['maxB']));\n\n     //p.rotate(count*-1.5);\n    // p.background(100);\n    // p.normalMaterial();\n    // p.noStroke();\n    // p.push();\n    // p.rotateY(rotation);\n    // p.box(100);\n    // p.pop();\n  };\n\n\n}\n\nexport default sketch;\n\n\n\n\n\n\n\n\n\n\n\n\n// function setup()\n// {\n   \n//    createCanvas(1920,1080);\n//    frameRate(10);\n//    colorMode(RGB, 255)\n//    //img = loadImage(\"texture1.png\");\n//    for(var i = 0; i< listSize-1; i++)\n//    {\n//      let temp = new Tri();\n//      temp.setSize(i);\n//      temp.randomColor();\n//      triangles.push(temp);\n     \n//    }\n//      // let voidTri = new Tri();\n//      // voidTri.setSize(listSize);\n//      // // triangles[triangles.length-1].rotate(675/360*(triangles.length-2));\n//      // voidTri.r=0;\n//      // voidTri.g=0;\n//      // voidTri.b=0;\n//      // voidTri.o=200;\n//     //triangles.push(voidTri);\n   \n   \n   \n// }\n\n// function draw()\n// {\n//   clear();\n//   background(200,0,255);\n//           translate(width/2,height/2);\n//           count+=2;\n\n//      for(var i =0; i<triangles.length-2; i++)\n//      { \n//       triangles[i].drawT();\n//       triangles[i].setSize(i);\n//       //triangles[i].o = (255)/(i+1);\n \n//       rotate((i/1500)+count/1000 );\n   \n//      }\n//    //  triangles[triangles.length-1].drawT();\n   \n//      for(var j=0; j<triangles.length-2; j++)\n//      {\n//         triangles[j] = triangles[j+1];\n           \n//      }\n//      triangles[triangles.length-2] = new Tri();\n//       triangles[triangles.length-2].setSize(triangles.length);\n//       triangles[triangles.length-2].randomColor();\n//      // // triangles[triangles.length-2].rotate(675/360*(triangles.length-2));\n//      // triangles[triangles.length-1].setSize(triangles.length-1);\n//      // // triangles[triangles.length-1].rotate((675/360*(triangles.length-2))+count);\n//      //filter(BLUR,1);\n     \n    \n//   // delay(10);\n// }\n","import React, { Component } from 'react';\nimport Slider from '@material-ui/core/Slider';\nimport {  Icon } from 'semantic-ui-react'\nclass ControlBar extends Component {\n  constructor(props){\n    super(props);\n    console.log(props.updateSpeed);\n\n  }\n\n   marks = [\n    {\n      value: -10,\n      label: '-10',\n    },\n    {\n      value: 10,\n      label: '10',\n    },\n  ];\n\n   makeStyles = {\n    root: {\n      width: 300,\n    },\n  };\n\n  \n\n\n\n  render(){\n    \n    \n    return(\n      <div  className=\"Control-Bar\" style={{width:'30%', margin:'auto'}}>\n        <Slider\n            min={-10}\n            max={10}\n            defaultValue={[0]}\n            step={.1}\n            valueLabelDisplay=\"auto\"\n            aria-labelledby=\"slider\"\n            marks={this.marks}\n        />\n          <Icon name='play'/>\n          <Icon  name='pause'/>\n\n        \n      </div>\n    );\n  }\n}\n\nexport default ControlBar;\n// onChange={this.props.updateSpeed()}\n\n// onChange={handleChange}","import React, { Component } from 'react';\nimport './App.css';\nimport P5Wrapper from 'react-p5-wrapper';\nimport sketch from './components/sketch.js';\nimport ControlBar from './components/ControlBar';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    //console.log(props);\n    // if(this.props.currentUser.access_token === undefined ){\n    //   this.props.history.go('http://localhost:3001/api/auth');\n\n\n    this.state = {\n      values:{\n        twistSpeed: 0\n     }\n    }\n\n\n  }\n   updateSpeed = (value) => {\n     this.setState({values: {twistSpeed:value}})\n\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <P5Wrapper sketch={sketch} attributes={this.state.values} />\n        <ControlBar updateSpeed={this.updateSpeed}/>\n\n      </div>\n    );\n  } \n}\nexport default App;\n// updateSpeed={this.updateSpeed}\n      // value={10}\n      // // onChange={handleChange}\n\n// import React from 'react';\n// import { makeStyles } from '@material-ui/core/styles';\n// import Typography from '@material-ui/core/Typography';\n// import Slider from '@material-ui/core/Slider';\n\n// const useStyles = makeStyles({\n//   root: {\n//     width: 300,\n//   },\n// });\n\n// function valuetext(value) {\n//   return `${value}°C`;\n// }\n\n// export default function RangeSlider() {\n//   const classes = useStyles();\n//   const [value, setValue] = React.useState([20, 37]);\n\n//   const handleChange = (event, newValue) => {\n//     setValue(newValue);\n//   };\n\n//   return (\n//     <div className={classes.root}>\n//       <Typography id=\"range-slider\" gutterBottom>\n//         Temperature range\n//       </Typography>\n//       <Slider\n//         value={value}\n//         onChange={handleChange}\n//         valueLabelDisplay=\"auto\"\n//         aria-labelledby=\"range-slider\"\n//         getAriaValueText={valuetext}\n//       />\n//     </div>\n//   );\n// }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}